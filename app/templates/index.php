<?php
/**
 * Created by PhpStorm.
 * User: Denis Belov
 * Date: 26.06.2020
 */ ?>

<h2>Стартовая страница</h2>

<h3>Задание</h3>
<p>
    1. Сделать регистрационную форму, состоящую из 4 полей:
<ul>
    <li>поле логин (user_login) (не должен включать в себя цифры),</li>
    <li>поле пароль (user_pass)(обязательно должен включать в себя, цифры, буквы и спецсимволы с длиной не менее 7
        символов),
    </li>
    <li>текстовое поле (user_description) - описания и</li>
    <li>поле возраст (user_age), в котором можно указать только цифровые
        значения с проверкой на вхождение в интервал от 10 до 85 лет.
    </li>
</ul>

Данные необходимо записывать в таблицу user_register_table (дату регистрации необходимо тоже включать).
Пароль в БД необходимо хранить в закрытом виде.
При неправильном вводе - выдавать сообщение-подсказку по вводу данных.
При успешной записи данных - выводить: Пользователь зарегистрирован.</p>
<p>
    2. Сделать форму авторизации
    Выдавать сообщения:
    Неправильный логин или неправильный пароль(отсутствующий в БД) - Пользователь с данным user_login или паролем не
    зарегистрирован. Пройдите регистрацию
    Успешная авторизация - Поздравляем! Вы все вспомнили верно.
</p>
<p>
    3. На отдельной странице вывести статистику для зарегистрированного и авторизованного пользователя.
    Краткий дескрипшен - Зарегистрировано X пользователей за последние 6 минут, и таблица с данными:
    столбцы (логин, возраст, описание). Отсортирована в порядке возрастания возрастов

<h3>Пояснения</h3>

<p><strong>
    Очевидно, что в представленном решении возможны улучшения. Однако размер кодовой базы уже превысил поставленные вами
    временные рамки. Поэтому я обозначу некоторые проблемы: <br>
    1). С данными я работаю прямо в контроллере и других классах. Работу с данными необходимо вынести в отдельный класс. В
    запросах к БД параметры вставленны прямо в тело запроса. Правильнее добавлять параметры через плейсхолдеры.<br>
    2). Валидацию данных формы можно упорядочить и, вероятно, сделать цепочкой вызовов.<br>
    3). При авторизации не используется защита от CSRF, bruteforce. Для защиты нужно на каждую форму генерировать токен
    и проверять его при POST запросе. Нужно логгировать запросы на авторизацию и при превышении показывать и
    обрабатывать капчу.
    4). Еще некоторые "узкие места", которые были упущены ввиду врменного ограничения, я пометил знаком @todo с соответствующими комментариями</strong></p>


